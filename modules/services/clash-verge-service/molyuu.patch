diff --git a/Cargo.lock b/Cargo.lock
index 093b49f..160c96c 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -144,6 +144,7 @@ name = "clash-verge-service"
 version = "0.1.0"
 dependencies = [
  "anyhow",
+ "lazy_static",
  "log",
  "log4rs",
  "once_cell",
@@ -521,6 +522,12 @@ dependencies = [
  "wasm-bindgen",
 ]
 
+[[package]]
+name = "lazy_static"
+version = "1.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"
+
 [[package]]
 name = "libc"
 version = "0.2.151"
diff --git a/Cargo.toml b/Cargo.toml
index dbbcf6d..e84a735 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -29,6 +29,7 @@ parking_lot = "0.12.0"
 windows-service = "0.6.0"
 tokio = { version = "1", features = ["full"] }
 serde = { version = "1.0", features = ["derive"] }
+lazy_static = "1.4.0"
 
 [target.'cfg(target_os = "linux")'.dependencies]
 openssl ={ version = "0.10", features = ["vendored"] }
diff --git a/src/service/mod.rs b/src/service/mod.rs
index cd2caee..8f17734 100644
--- a/src/service/mod.rs
+++ b/src/service/mod.rs
@@ -6,6 +6,8 @@ use self::web::*;
 use tokio::runtime::Runtime;
 use warp::Filter;
 
+use lazy_static::lazy_static;
+
 #[cfg(windows)]
 use std::{ffi::OsString, time::Duration};
 #[cfg(windows)]
@@ -24,6 +26,10 @@ const SERVICE_TYPE: ServiceType = ServiceType::OWN_PROCESS;
 const SERVICE_NAME: &str = "clash_verge_service";
 const LISTEN_PORT: u16 = 33211;
 
+lazy_static! {
+    pub static ref CUSTOM_MIHOMO_BINARY: String = std::env::var("CUSTOM_MIHOMO_BINARY").unwrap_or("".to_string());
+}
+
 macro_rules! wrap_response {
     ($expr: expr) => {
         match $expr {
diff --git a/src/service/web.rs b/src/service/web.rs
index 7a50df8..95d4f39 100644
--- a/src/service/web.rs
+++ b/src/service/web.rs
@@ -1,4 +1,5 @@
 use super::data::*;
+use super::CUSTOM_MIHOMO_BINARY;
 use anyhow::{bail, Context, Result};
 use once_cell::sync::OnceCell;
 use parking_lot::Mutex;
@@ -49,14 +50,19 @@ pub fn start_clash(body: StartBody) -> Result<()> {
 
     let config_file = body.config_file.as_str();
 
-    let args = match core_type.as_str() {
-        "clash-meta" => vec!["-d", config_dir, "-f", config_file],
-        "clash-meta-alpha" => vec!["-d", config_dir, "-f", config_file],
-        _ => vec!["-d", config_dir, "-f", config_file],
+    let args = if CUSTOM_MIHOMO_BINARY.as_str() == "" {
+         match core_type.as_str() {
+            "clash-meta" => vec!["-d", config_dir, "-f", config_file],
+            "clash-meta-alpha" => vec!["-d", config_dir, "-f", config_file],
+            _ => vec!["-d", config_dir, "-f", config_file],
+        }
+    } else {
+        // Custom meta core is set
+        vec!["-d", config_dir, "-f", config_file]
     };
 
     let log = File::create(body.log_file).context("failed to open log")?;
-    let cmd = Command::new(body.bin_path).args(args).stdout(log).spawn()?;
+    let cmd = Command::new(if CUSTOM_MIHOMO_BINARY.as_str() == "" { body.bin_path } else { CUSTOM_MIHOMO_BINARY.to_string() }).args(args).stdout(log).spawn()?;
 
     let mut arc = ClashStatus::global().lock();
     arc.child = Some(cmd);
